package com.wzy.lamanpro.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HIS_DATA".
*/
public class HisDataDao extends AbstractDao<HisData, Long> {

    public static final String TABLENAME = "HIS_DATA";

    /**
     * Properties of entity HisData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Data = new Property(1, String.class, "data", false, "DATA");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property TestName = new Property(4, String.class, "testName", false, "TEST_NAME");
        public final static Property TestAccount = new Property(5, String.class, "testAccount", false, "TEST_ACCOUNT");
        public final static Property TestTime = new Property(6, String.class, "testTime", false, "TEST_TIME");
        public final static Property TestPower = new Property(7, String.class, "testPower", false, "TEST_POWER");
        public final static Property TestLocal = new Property(8, String.class, "testLocal", false, "TEST_LOCAL");
    }


    public HisDataDao(DaoConfig config) {
        super(config);
    }
    
    public HisDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HIS_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATA\" TEXT," + // 1: data
                "\"DATE\" TEXT," + // 2: date
                "\"NAME\" TEXT," + // 3: name
                "\"TEST_NAME\" TEXT," + // 4: testName
                "\"TEST_ACCOUNT\" TEXT," + // 5: testAccount
                "\"TEST_TIME\" TEXT," + // 6: testTime
                "\"TEST_POWER\" TEXT," + // 7: testPower
                "\"TEST_LOCAL\" TEXT);"); // 8: testLocal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HIS_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HisData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(2, data);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String testName = entity.getTestName();
        if (testName != null) {
            stmt.bindString(5, testName);
        }
 
        String testAccount = entity.getTestAccount();
        if (testAccount != null) {
            stmt.bindString(6, testAccount);
        }
 
        String testTime = entity.getTestTime();
        if (testTime != null) {
            stmt.bindString(7, testTime);
        }
 
        String testPower = entity.getTestPower();
        if (testPower != null) {
            stmt.bindString(8, testPower);
        }
 
        String testLocal = entity.getTestLocal();
        if (testLocal != null) {
            stmt.bindString(9, testLocal);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HisData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(2, data);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String testName = entity.getTestName();
        if (testName != null) {
            stmt.bindString(5, testName);
        }
 
        String testAccount = entity.getTestAccount();
        if (testAccount != null) {
            stmt.bindString(6, testAccount);
        }
 
        String testTime = entity.getTestTime();
        if (testTime != null) {
            stmt.bindString(7, testTime);
        }
 
        String testPower = entity.getTestPower();
        if (testPower != null) {
            stmt.bindString(8, testPower);
        }
 
        String testLocal = entity.getTestLocal();
        if (testLocal != null) {
            stmt.bindString(9, testLocal);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HisData readEntity(Cursor cursor, int offset) {
        HisData entity = new HisData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // data
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // testName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // testAccount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // testTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // testPower
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // testLocal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HisData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setData(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTestName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTestAccount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTestTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTestPower(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTestLocal(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HisData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HisData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HisData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
