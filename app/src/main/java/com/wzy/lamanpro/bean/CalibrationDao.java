package com.wzy.lamanpro.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CALIBRATION".
*/
public class CalibrationDao extends AbstractDao<Calibration, Long> {

    public static final String TABLENAME = "CALIBRATION";

    /**
     * Properties of entity Calibration.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Param1 = new Property(1, double.class, "param1", false, "PARAM1");
        public final static Property Param2 = new Property(2, double.class, "param2", false, "PARAM2");
        public final static Property Param3 = new Property(3, double.class, "param3", false, "PARAM3");
        public final static Property Param4 = new Property(4, double.class, "param4", false, "PARAM4");
        public final static Property Param5 = new Property(5, double.class, "param5", false, "PARAM5");
        public final static Property Param6 = new Property(6, double.class, "param6", false, "PARAM6");
        public final static Property Param7 = new Property(7, double.class, "param7", false, "PARAM7");
        public final static Property Param8 = new Property(8, double.class, "param8", false, "PARAM8");
        public final static Property Param9 = new Property(9, double.class, "param9", false, "PARAM9");
        public final static Property Param10 = new Property(10, double.class, "param10", false, "PARAM10");
    }


    public CalibrationDao(DaoConfig config) {
        super(config);
    }
    
    public CalibrationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CALIBRATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PARAM1\" REAL NOT NULL ," + // 1: param1
                "\"PARAM2\" REAL NOT NULL ," + // 2: param2
                "\"PARAM3\" REAL NOT NULL ," + // 3: param3
                "\"PARAM4\" REAL NOT NULL ," + // 4: param4
                "\"PARAM5\" REAL NOT NULL ," + // 5: param5
                "\"PARAM6\" REAL NOT NULL ," + // 6: param6
                "\"PARAM7\" REAL NOT NULL ," + // 7: param7
                "\"PARAM8\" REAL NOT NULL ," + // 8: param8
                "\"PARAM9\" REAL NOT NULL ," + // 9: param9
                "\"PARAM10\" REAL NOT NULL );"); // 10: param10
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CALIBRATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Calibration entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getParam1());
        stmt.bindDouble(3, entity.getParam2());
        stmt.bindDouble(4, entity.getParam3());
        stmt.bindDouble(5, entity.getParam4());
        stmt.bindDouble(6, entity.getParam5());
        stmt.bindDouble(7, entity.getParam6());
        stmt.bindDouble(8, entity.getParam7());
        stmt.bindDouble(9, entity.getParam8());
        stmt.bindDouble(10, entity.getParam9());
        stmt.bindDouble(11, entity.getParam10());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Calibration entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getParam1());
        stmt.bindDouble(3, entity.getParam2());
        stmt.bindDouble(4, entity.getParam3());
        stmt.bindDouble(5, entity.getParam4());
        stmt.bindDouble(6, entity.getParam5());
        stmt.bindDouble(7, entity.getParam6());
        stmt.bindDouble(8, entity.getParam7());
        stmt.bindDouble(9, entity.getParam8());
        stmt.bindDouble(10, entity.getParam9());
        stmt.bindDouble(11, entity.getParam10());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Calibration readEntity(Cursor cursor, int offset) {
        Calibration entity = new Calibration( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // param1
            cursor.getDouble(offset + 2), // param2
            cursor.getDouble(offset + 3), // param3
            cursor.getDouble(offset + 4), // param4
            cursor.getDouble(offset + 5), // param5
            cursor.getDouble(offset + 6), // param6
            cursor.getDouble(offset + 7), // param7
            cursor.getDouble(offset + 8), // param8
            cursor.getDouble(offset + 9), // param9
            cursor.getDouble(offset + 10) // param10
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Calibration entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParam1(cursor.getDouble(offset + 1));
        entity.setParam2(cursor.getDouble(offset + 2));
        entity.setParam3(cursor.getDouble(offset + 3));
        entity.setParam4(cursor.getDouble(offset + 4));
        entity.setParam5(cursor.getDouble(offset + 5));
        entity.setParam6(cursor.getDouble(offset + 6));
        entity.setParam7(cursor.getDouble(offset + 7));
        entity.setParam8(cursor.getDouble(offset + 8));
        entity.setParam9(cursor.getDouble(offset + 9));
        entity.setParam10(cursor.getDouble(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Calibration entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Calibration entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Calibration entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
